// üå∏ GardenSpirit by Yuki ‚Äî Stable Render + BetterStack Version
// ‚úÖ ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö uptime, /status, /clearlog, ‡πÅ‡∏•‡∏∞‡πÇ‡∏´‡∏•‡∏î slash commands ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥

const express = require("express");
const { Client, GatewayIntentBits, Partials, Collection } = require("discord.js");
require("dotenv").config();
const fs = require("fs");
const path = require("path");

const app = express();
const PORT = process.env.PORT || 3000;

// üå∏ ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡∏´‡∏•‡∏±‡∏Å ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö uptime
app.get("/", (req, res) => {
  res.send("üå∑ GardenSpirit by Yuki is running 24/7 ‚Äî Powered by Render & BetterStack!");
});

// ‚úÖ Route ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö BetterStack ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û
app.get("/status", (req, res) => {
  res.status(200).send("‚úÖ GardenSpirit bot is alive and running smoothly!");
});

// üßπ Route ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡πâ‡∏≤‡∏á log (optional)
app.get("/clearlog", (req, res) => {
  console.clear();
  res.send("üßπ Logs cleared successfully!");
});

// üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå Express
app.listen(PORT, () => {
  console.log(`‚úÖ Web server is running on port ${PORT}`);
});

// üåø ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Discord Client
const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMembers,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent,
    GatewayIntentBits.GuildMessageReactions,
  ],
  partials: [Partials.Message, Partials.Channel, Partials.Reaction],
});

client.commands = new Collection();

// üì¶ ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå /commands
const foldersPath = path.join(__dirname, "commands");
const commandFolders = fs.readdirSync(foldersPath);

for (const folder of commandFolders) {
  const commandsPath = path.join(foldersPath, folder);
  const commandFiles = fs.readdirSync(commandsPath).filter(file => file.endsWith(".js"));

  for (const file of commandFiles) {
    const filePath = path.join(commandsPath, file);
    const command = require(filePath);
    if ("data" in command && "execute" in command) {
      client.commands.set(command.data.name, command);
      console.log(`‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: ${command.data.name}`);
    } else {
      console.warn(`‚ö†Ô∏è ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏ü‡∏•‡πå ${filePath} (‡πÑ‡∏°‡πà‡∏°‡∏µ data ‡∏´‡∏£‡∏∑‡∏≠ execute)`);
    }
  }
}

// üß† ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏ó‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå
client.once("ready", () => {
  console.log(`ü§ñ Logged in as ${client.user.tag}`);
});

// ‚ö° ‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏±‡∏ö Slash Commands
client.on("interactionCreate", async interaction => {
  if (!interaction.isChatInputCommand()) return;

  const command = client.commands.get(interaction.commandName);
  if (!command) return;

  try {
    await command.execute(interaction);
  } catch (error) {
    console.error(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á ${interaction.commandName}:`, error);
    await interaction.reply({
      content: "‚ö†Ô∏è ‡∏°‡∏µ‡∏ö‡∏≤‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ!",
      ephemeral: true,
    });
  }
});

// ü™Ñ ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏ö‡∏≠‡∏ó‡∏î‡πâ‡∏ß‡∏¢ TOKEN ‡∏à‡∏≤‡∏Å .env
client.login(process.env.TOKEN);
