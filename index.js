// üå∏ GardenSpirit by Yuki - Main Bot File
const express = require("express");
const { Client, GatewayIntentBits, Partials, Collection, Events } = require("discord.js");
const fs = require("fs");
const path = require("path");
require("dotenv").config();

const config = require("./config.json");

// üåê ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ß‡πá‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏ß‡πâ‡πÉ‡∏´‡πâ Render ‡∏ï‡∏£‡∏ß‡∏à uptime
const app = express();
const PORT = process.env.PORT || 3000;
app.get("/", (req, res) => res.send("üåø GardenSpirit by Yuki is running 24/7!"));
app.listen(PORT, () => console.log(`‚úÖ Server is live on port ${PORT}`));

// üå∏ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Client Discord
const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent,
    GatewayIntentBits.GuildMembers,
    GatewayIntentBits.GuildMessageReactions,
  ],
  partials: [Partials.Message, Partials.Channel, Partials.Reaction],
});

client.commands = new Collection();

// üîπ ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á (‡∏à‡∏≤‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå /commands)
const commandsPath = path.join(__dirname, "commands");
for (const folder of fs.readdirSync(commandsPath)) {
  const folderPath = path.join(commandsPath, folder);
  for (const file of fs.readdirSync(folderPath).filter(f => f.endsWith(".js"))) {
    const command = require(path.join(folderPath, file));
    client.commands.set(command.data.name, command);
  }
}

// üîπ ‡πÇ‡∏´‡∏•‡∏î event ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏à‡∏≤‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå /events)
const eventsPath = path.join(__dirname, "events");
for (const file of fs.readdirSync(eventsPath).filter(f => f.endsWith(".js"))) {
  const eventFile = require(path.join(eventsPath, file));
  if (typeof eventFile === "function") eventFile(client);
}

// üéâ Event: ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏ó‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
client.once(Events.ClientReady, c => {
  console.log(`üå∏ Logged in as ${c.user.tag}`);
});

// ‚öôÔ∏è Event: ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ Slash Command
client.on(Events.InteractionCreate, async interaction => {
  if (!interaction.isChatInputCommand()) return;
  const command = client.commands.get(interaction.commandName);
  if (!command) return;

  try {
    await command.execute(interaction);
  } catch (error) {
    console.error("‚ùå Command Error:", error);
    await interaction.reply({
      content: "‚ö†Ô∏è ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ!",
      ephemeral: true,
    });
  }
});

// ü™¥ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö / ‡∏•‡∏≤‡∏à‡∏≤‡∏Å
client.on(Events.GuildMemberAdd, async member => {
  const channel = member.guild.channels.cache.get(config.welcomeChannel);
  if (!channel) return;

  await channel.send(`üéâ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö <@${member.id}> ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà ${member.guild.name}! üå∏`);
});

client.on(Events.GuildMemberRemove, async member => {
  const channel = member.guild.channels.cache.get(config.goodbyeChannel);
  if (!channel) return;

  await channel.send(`üëã ‡∏•‡∏≤‡∏Å‡πà‡∏≠‡∏ô ${member.user.username} ‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡πÇ‡∏ä‡∏Ñ‡∏î‡∏µ‡∏ô‡∏∞! üíê`);
});

// üîÅ ‡∏£‡∏∞‡∏ö‡∏ö Reaction Role
client.on(Events.MessageReactionAdd, async (reaction, user) => {
  if (user.bot) return;
  if (reaction.partial) await reaction.fetch();

  // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï (‡∏ñ‡πâ‡∏≤‡∏Å‡∏≥‡∏´‡∏ô‡∏î)
  if (config.allowedChannelId && reaction.message.channel.id !== config.allowedChannelId) return;

  const emojiKey = reaction.emoji.id
    ? `<:${reaction.emoji.name}:${reaction.emoji.id}>`
    : reaction.emoji.name;

  const roleId = config.reactionRoles?.[emojiKey];
  if (!roleId) return;

  const member = await reaction.message.guild.members.fetch(user.id);

  // üîÑ ‡∏•‡∏ö‡∏¢‡∏®‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô
  for (const id of Object.values(config.reactionRoles)) {
    if (member.roles.cache.has(id)) await member.roles.remove(id);
  }

  await member.roles.add(roleId);
  console.log(`‚úÖ ${member.user.tag} ‡∏£‡∏±‡∏ö‡∏¢‡∏®‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡πâ‡∏ß`);
});

client.on(Events.MessageReactionRemove, async (reaction, user) => {
  if (user.bot) return;
  if (reaction.partial) await reaction.fetch();

  const emojiKey = reaction.emoji.id
    ? `<:${reaction.emoji.name}:${reaction.emoji.id}>`
    : reaction.emoji.name;

  const roleId = config.reactionRoles?.[emojiKey];
  if (!roleId) return;

  const member = await reaction.message.guild.members.fetch(user.id);
  await member.roles.remove(roleId);
  console.log(`‚ùé ${member.user.tag} ‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏¢‡∏®‡∏≠‡∏≠‡∏Å`);
});

// üîë ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
client.login(process.env.TOKEN);
