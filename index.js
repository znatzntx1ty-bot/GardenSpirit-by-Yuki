// üå∏ GardenSpirit by Yuki ‚Äî Admin & Utility Core

const express = require("express");
const { Client, GatewayIntentBits, Partials, Collection } = require("discord.js");
const fs = require("fs");
const path = require("path");
require("dotenv").config();

const app = express();
const PORT = process.env.PORT || 3000;

// üå∏ ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö uptime
app.get("/", (req, res) => {
  res.send("üå∏ GardenSpirit by Yuki is running smoothly!");
});
app.listen(PORT, () => console.log(`‚úÖ Server running on port ${PORT}`));

// üéã ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Discord Client
const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent,
    GatewayIntentBits.GuildMembers,
  ],
  partials: [Partials.Message, Partials.Channel, Partials.Reaction],
});

client.commands = new Collection();

// üß© ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå /commands
const foldersPath = path.join(__dirname, "commands");
const commandFolders = fs.readdirSync(foldersPath);

for (const folder of commandFolders) {
  const commandsPath = path.join(foldersPath, folder);
  const commandFiles = fs.readdirSync(commandsPath).filter(file => file.endsWith(".js"));

  for (const file of commandFiles) {
    const filePath = path.join(commandsPath, file);
    const command = require(filePath);
    if ("data" in command && "execute" in command) {
      client.commands.set(command.data.name, command);
    } else {
      console.warn(`‚ö†Ô∏è ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á ${filePath} ‡πÑ‡∏°‡πà‡∏°‡∏µ data ‡∏´‡∏£‡∏∑‡∏≠ execute`);
    }
  }
}

// üéØ Event: ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏ó‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå
client.once("ready", async () => {
  console.log(`‚úÖ Logged in as ${client.user.tag}`);

  const logChannel =
    client.channels.cache.find(ch => ch.name === "üå∏ÔΩúbot-logs") ||
    client.channels.cache.find(ch => ch.name === "bot-logs");

  if (logChannel) {
    const now = new Date().toLocaleString("th-TH", { timeZone: "Asia/Bangkok" });
    await logChannel.send(`‚úÖ **‡∏ö‡∏≠‡∏ó‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡πÅ‡∏•‡πâ‡∏ß!** (${now})`);
  }
});

// ‚öôÔ∏è Event: ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ Interaction
client.on("interactionCreate", async interaction => {
  if (!interaction.isChatInputCommand()) return;

  const command = client.commands.get(interaction.commandName);
  if (!command) return;

  try {
    await command.execute(interaction);
  } catch (error) {
    console.error(`‚ùå Error executing command: ${interaction.commandName}`, error);

    const logChannel =
      interaction.guild.channels.cache.find(ch => ch.name === "üå∏ÔΩúbot-logs") ||
      interaction.guild.channels.cache.find(ch => ch.name === "bot-logs");

    if (logChannel) {
      await logChannel.send(
        `‚ö†Ô∏è **‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á:** \`${interaction.commandName}\`\n\`\`\`${error.message}\`\`\``
      );
    }

    if (interaction.replied || interaction.deferred) {
      await interaction.followUp({
        content: "‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ",
        ephemeral: true,
      });
    } else {
      await interaction.reply({
        content: "‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ",
        ephemeral: true,
      });
    }
  }
});

// üîå Login
client.login(process.env.TOKEN || "YOUR_RENDER_ENV_TOKEN_HERE");
