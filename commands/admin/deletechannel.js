const { SlashCommandBuilder, PermissionFlagsBits, ChannelType } = require("discord.js");

module.exports = {
  data: new SlashCommandBuilder()
    .setName("deletechannel")
    .setDescription("üóëÔ∏è ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏•‡∏ö‡∏ä‡πà‡∏≠‡∏á‡πÑ‡∏î‡πâ (‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 5 ‡∏ä‡πà‡∏≠‡∏á)")
    .setDefaultMemberPermissions(PermissionFlagsBits.ManageChannels),

  async execute(interaction) {
    if (!interaction.member.permissions.has(PermissionFlagsBits.ManageChannels)) {
      return interaction.reply({
        content: "‚ö†Ô∏è ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ",
        ephemeral: true,
      });
    }

    // ‚úÖ ‡∏î‡∏∂‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (‡∏à‡∏≥‡∏Å‡∏±‡∏î 5)
    const textChannels = interaction.guild.channels.cache
      .filter(ch => ch.type === ChannelType.GuildText)
      .sort((a, b) => b.createdTimestamp - a.createdTimestamp)
      .first(5);

    if (!textChannels.length) {
      return interaction.reply("üòï ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡πà‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡πâ‡∏•‡∏ö‡πÉ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ");
    }

    // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏¥‡∏™‡∏ï‡πå‡πÅ‡∏™‡∏î‡∏á‡∏´‡πâ‡∏≠‡∏á
    let list = textChannels
      .map((ch, i) => `${i + 1}. #${ch.name}`)
      .join("\n");

    await interaction.reply({
      content: `üßπ **‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏•‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ (‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 5 ‡∏ä‡πà‡∏≠‡∏á)**\n\n${list}\n\n‡∏û‡∏¥‡∏°‡∏û‡πå‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö ‡πÄ‡∏ä‡πà‡∏ô \`1 3 4\``,
      ephemeral: false,
    });

    // ‚úÖ ‡∏£‡∏≠‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
    const filter = m => m.author.id === interaction.user.id;
    const collector = interaction.channel.createMessageCollector({ filter, time: 20000 });

    collector.on("collect", async msg => {
      const numbers = msg.content
        .split(" ")
        .map(n => parseInt(n))
        .filter(n => !isNaN(n) && n >= 1 && n <= textChannels.length);

      if (numbers.length === 0) {
        await msg.reply("‚ö†Ô∏è ‡πÇ‡∏õ‡∏£‡∏î‡∏û‡∏¥‡∏°‡∏û‡πå‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ä‡πà‡∏≠‡∏á‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (1‚Äì5)");
        return;
      }

      const toDelete = numbers.map(n => textChannels[n - 1]);
      const deleted = [];
      const failed = [];

      for (const ch of toDelete) {
        try {
          await ch.delete(`Deleted by ${interaction.user.tag}`);
          deleted.push(`#${ch.name}`);
        } catch (err) {
          console.error(err);
          failed.push(`#${ch.name}`);
        }
      }

      let result = "";
      if (deleted.length) result += `‚úÖ ‡∏•‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${deleted.join(", ")}\n`;
      if (failed.length) result += `‚ö†Ô∏è ‡∏•‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${failed.join(", ")}\n`;
      if (!result) result = "‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡πà‡∏≠‡∏á‡πÉ‡∏î‡∏ñ‡∏π‡∏Å‡∏•‡∏ö";

      await msg.reply(result);
      collector.stop();
    });

    collector.on("end", collected => {
      if (!collected.size) {
        interaction.followUp("‚åõ ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏•‡∏ö‡∏ä‡πà‡∏≠‡∏á (20 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)");
      }
    });
  },
};
